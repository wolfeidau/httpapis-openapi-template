// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// New Document
type NewDocument interface{}

// NewDocumentJSONBody defines parameters for NewDocument.
type NewDocumentJSONBody NewDocument

// NewDocumentJSONRequestBody defines body for NewDocument for application/json ContentType.
type NewDocumentJSONRequestBody NewDocumentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// create a document.
	// (POST /2021-08-15/document)
	NewDocument(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// NewDocument converts echo context to params.
func (w *ServerInterfaceWrapper) NewDocument(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewDocument(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/2021-08-15/document", wrapper.NewDocument, m...)

} // Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4xSXWvbMBT9K+Kuj3acpBSG3lK2QgZrTVPYwzbGrX1ra9iSJslOsuD/Pq7sfNBS2Jut",
	"cz/OPeccoDCtNZp08CAP4IuaWoyf97T9ZIquJR34tyRfOGWDMhokg+KEDsOQgNIv5m3dU628WOVrYZ3p",
	"VUleoBa0w9Y2JMppgPDBOKxIeHK9Kmj2Q0MCQYWGQMLnqXqVryGBnpwfRy/ny0U6/5gubmBIwFjSaBVI",
	"uJ7NZ0tIwGKo4yHZuTIrLy6yxod3GBtLDvlBbFXTCCwKskGg+LJ5uD/TRl1G6iRUmEHkMHaty1Gik0IJ",
	"OPrTkQ+3ptzzzsLoMNFAaxtVxL7st2cORxv468rRC0j4kJ19yiaTsssN0QNeohyVIIPrKD54a7SnqMNy",
	"vnh77umYwhEGKsWxBXig79oW3R4kjLDA0/V8cMDKg/x+GgI/E9il2OJfo1O0qsJAW9ynSgeqRmmYQR2C",
	"/UqhNixT/rB5im55H2pnuqq+pRp7ZRxI0NST40V7y1HArf9lndntIYHOKZ51p6XcdM8MOi2vDqtvGylz",
	"dEHxtkGeWRzBR6oi0mD7XKLkmGTL+eImnV+n14vspdMFt/rs6rDK13fT72zluEf1lCndm9Evz7KzTpMQ",
	"r8U9unPOk2fZNLZ0IT0M78g2ZSbtsVElhqgINg38Z3U0nevlAaZHeryMIYckeQ3l6LClQNweUzQM/wIA",
	"AP//IyjVESUEAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
